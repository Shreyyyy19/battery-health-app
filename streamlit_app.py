# -*- coding: utf-8 -*-
"""streamlit_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1z2E6fdtW4Vy3s8R0Jp4AJB_wxZ-UyXlO

New debugged code
"""

#!pip install streamlit

import streamlit as st
import numpy as np
import tensorflow as tf

# Load the trained model (without compiling to avoid custom loss issues)
model = tf.keras.models.load_model("my_model.h5", compile=False)

# Load target scaler parameters
y_min = float(np.load("y_scaler_min.npy"))
y_scale = float(np.load("y_scaler_scale.npy"))

st.set_page_config(page_title="Battery Voltage Predictor", page_icon="🔋")
st.title("🔋 EV Battery Mean Voltage Predictor")

st.markdown("""
Use the sliders and inputs below to simulate one EV battery charge/discharge cycle.
The model will predict the **mean voltage** for that cycle based on selected parameters.
""")

# Input features
ambient_temperature = st.number_input("Ambient Temperature (°C)", 20.0, 40.0, 25.0)
mean_current = st.number_input("Mean Current (A)", -5.0, 5.0, 0.5)
mean_temperature = st.number_input("Mean Cell Temperature (°C)", 20.0, 45.0, 30.0)
max_voltage = st.number_input("Max Voltage (V)", 3.5, 4.5, 4.2)
min_voltage = st.number_input("Min Voltage (V)", 2.5, 4.0, 3.3)
max_current = st.number_input("Max Current (A)", -5.0, 5.0, 1.5)
min_current = st.number_input("Min Current (A)", -5.0, 5.0, -3.0)
mean_current_charge = st.number_input("Mean Current Charge (A)", -5.0, 5.0, 0.8)
mean_voltage_charge = st.number_input("Mean Voltage Charge (V)", 3.0, 4.5, 4.1)

# Format inputs for prediction
input_features = np.array([[ambient_temperature,
                            mean_current,
                            mean_temperature,
                            max_voltage,
                            min_voltage,
                            max_current,
                            min_current,
                            mean_current_charge,
                            mean_voltage_charge]], dtype=np.float32)

# Predict and inverse scale
if st.button("Predict Mean Voltage"):
    try:
        scaled_prediction = model.predict(input_features)[0][0]
        original_prediction = float(scaled_prediction * y_scale + y_min)

        # Interpret battery health
        if original_prediction >= 3.6:
            health_status = "✅ Good"
        elif original_prediction >= 3.4:
            health_status = "⚠️ Warning"
        else:
            health_status = "❌ Needs Replacement"

        st.success(f"🔋 Predicted Mean Voltage: **{original_prediction:.3f} V**")
        st.info(f"📊 Battery Health Status: **{health_status}**")

    except Exception as e:
        st.error(f"⚠️ Prediction failed: {str(e)}")
